@@bignum.negative?
@@bignum.+
@@bignum.*
@@bignum.-
@@bignum.mdigit-length
@@bignum.mdigit-ref
@@bignum.mdigit-width
@@bignum.fast-gcd-size
@@bignum.copy
@@bignum.normalize!
@@bignum.adigit-bitwise-ior!
@@bignum.adigit-bitwise-xor!
@@bignum.adigit-bitwise-and!
@@bignum.make
@@bignum.arithmetic-shift
@@bignum.mdigit-base-minus-1
@@bignum.adigit-width
@@bignum.arithmetic-shift-into!
@@bignum.mdigit-set!

#;(define-prim (@@bignum.negative? x))
#;(define-prim (@@bignum.adigit-length x))
#;(define-prim (@@bignum.adigit-inc! x i))
#;(define-prim (@@bignum.adigit-dec! x i))
#;(define-prim (@@bignum.adigit-add! x i y j carry))
#;(define-prim (@@bignum.adigit-sub! x i y j borrow))
#;(define-prim (@@bignum.mdigit-length x))
#;(define-prim (@@bignum.mdigit-ref x i))
#;(define-prim (@@bignum.mdigit-set! x i mdigit))
#;(define-prim (@@bignum.mdigit-mul! x i y j multiplier carry))
#;(define-prim (@@bignum.mdigit-div! x i y j quotient borrow))
#;(define-prim (@@bignum.mdigit-quotient u j v_n-1))
#;(define-prim (@@bignum.mdigit-remainder u j v_n-1 q-hat))
#;(define-prim (@@bignum.mdigit-test? q-hat v_n-2 r-hat u_j-2))

#;(define-prim (@@bignum.adigit-ones? x i))
#;(define-prim (@@bignum.adigit-zero? x i))
#;(define-prim (@@bignum.adigit-negative? x i))
#;(define-prim (@@bignum.adigit-= x y i))
#;(define-prim (@@bignum.adigit-< x y i))
#;(define-prim (@@fixnum->bignum x))
#;(define-prim (@@bignum.adigit-shrink! x n))
#;(define-prim (@@bignum.adigit-copy! x i y j))
#;(define-prim (@@bignum.adigit-cat! x i hi j lo k divider))
#;(define-prim (@@bignum.adigit-bitwise-and! x i y j))
#;(define-prim (@@bignum.adigit-bitwise-ior! x i y j))
#;(define-prim (@@bignum.adigit-bitwise-xor! x i y j))
#;(define-prim (@@bignum.adigit-bitwise-not! x i))

#;(macro-case-target
 ((C)
  (define-prim (@@bignum.fdigit-length x))
  (define-prim (@@bignum.fdigit-ref x i))
  (define-prim (@@bignum.fdigit-set! x i fdigit))))

;;; Bignum related constants.

;;(define @@bignum.adigit-ones #xffffffffffffffff)
;;(define @@bignum.adigit-zeros #x10000000000000000)
#;(define @@bignum.adigit-ones (@@fixnum->bignum -1))
#;(define @@bignum.adigit-zeros (@@fixnum->bignum 0))

#;(macro-case-target
 ((C)
  (define @@bignum.fdigit-base
    (@@fxarithmetic-shift-left 1 @@bignum.fdigit-width))))

#;(define @@bignum.mdigit-base
  (@@fxarithmetic-shift-left 1 @@bignum.mdigit-width))

#;(define @@bignum.inexact-mdigit-base
  (@@fixnum->flonum @@bignum.mdigit-base))

#;(define @@bignum.mdigit-base-minus-1
  (@@fx- @@bignum.mdigit-base 1))

#;(define @@bignum.minus-mdigit-base
  (@@fx- @@bignum.mdigit-base))

#;(define @@bignum.max-fixnum-div-mdigit-base
  (@@fxquotient @@max-fixnum @@bignum.mdigit-base))

#;(define @@bignum.min-fixnum-div-mdigit-base
  (@@fxquotient @@min-fixnum @@bignum.mdigit-base))

#;(define @@bignum.2*min-fixnum
  (if (@@fixnum? -1073741824)
      -4611686018427387904 ;; (- (expt 2 62))
      -1073741824))        ;; (- (expt 2 30))

;;; The following global variables control when each of the three
;;; multiplication algorithms are used.

#;(define @@bignum.naive-mul-max-width 1400)
#;(set! @@bignum.naive-mul-max-width @@bignum.naive-mul-max-width)

#;(define @@bignum.fft-mul-min-width 20000)
#;(set! @@bignum.fft-mul-min-width @@bignum.fft-mul-min-width)

#;(define @@bignum.fft-mul-max-width
  (if (@@fixnum? -1073741824) ;; to avoid creating f64vectors that are too long
      536870912
      4194304))
#;(set! @@bignum.fft-mul-max-width @@bignum.fft-mul-max-width)


#;(define @@bignum.fast-gcd-size @@bignum.naive-mul-max-width)  ;; must be >= 64
#;(set! @@bignum.fast-gcd-size @@bignum.fast-gcd-size)

neil toronto
racketcon 2013 (yt) floating point
